{
	"meta": {
		"url": "http://0ptr.pizza",
		"id": "unique-id",
		"title": "title",
		"disqus": {
			"shortname": "0ptr.disqus.com"
		}
	},
	"content": [{
		"type": "image",
		"data": "<div class=\"columns centered\"><div class=\"column centered col-xs-12\"><img src=\"static/img/matroschka/01.png\" class=\"img-responsive image \" /></div></div>"
	}, {
		"type": "text",
		"data": {
			"headline": "Матрёшка",
			"subheadline": "Steganography with Python",
			"date": "JULY 25, 2016",
			"text": "<p><b>Матрёшка</b> [mɐˈtrʲɵʂkə] is a command-line steganography tool written in pure Python. You can use it to hide and encrypt images or text in the least significant bits of pixels in an image. </p>\n                \n                <h2>Encryption</h2>\n                <p>\n                The encryption uses <b>MAC-SHA256</b> to authenticate the hidden data. Therefore the supplied <b>MAC</b> password is hashed with <b>SHA-256</b> digest to generate the <b>HMAC-SHA256</b> key. The <b>MAC</b> and the message data is further encrypted using the <b>XTEA</b> algorithm in <b>CFB</b> mode running <b>32 iterations</b>, before beeing embedded in the image data. The <b>SHA-256</b> hash for the <b>XTEA</b> key is created using the <b>128 high-order bits</b> of the supplied password. A random 8 byte seed is used in the <b>CFB 64 bit block cipher</b>.\n                </p>\n\n                <h2>Decryption</h2>\n                <p>The random seed is appended to the hidden secret and is used with the user supplied password to decrypt the hidden message using <b>XTEA block cipher</b> according to the encryption process. Further the decrypted secret is authenticated by comparing the embeded hmac hash with the <b>HMAC-SHA256</b> of the extracted hidden message and the user supplied mac password.\n                </p>\n\n                <h2>Note</h2>\n                <blockquote>\n                    This is a fun project. Do not use it for serious encryption purposes!\n                </blockquote>\n\n                <h2>Installation</h2>\n                <p>You may want to install <b></b>Matroschka in a virtualenv that has <a href=\"https://python-pillow.org/\">Pillow</a> installed. Clone the <a href=\"https://github.com/fgrimme/Matroschka\">GitHub repo</a> and navigate to the root dir. That's it.             \n                </p>\n                <pre><code class=\"language-bash\">\npip install Pillow\ngit clone git@github.com:fgrimme/Matroschka.git\ncd Matroschka \n                </code></pre>\n\n                <h2>Usage</h2>\n                <p>Only losless image formats are supported. Therefore It is recommended to use <b>PNG</b> or <b>BMP</b> images to hide your secret. The secret can be either a text file with the <b>.txt</b> extension or an image with the <b>.png</b> extension and format. \n                </p>\n                <blockquote>\n                    If your image contains transparent pixels, most likely artifacts will be visible after embedding data. This is caused by the manipulation of the least-significant bit in every pixels color channels.\n                </blockquote>\n\n                <h3>Hide Secret</h3>\n                <pre><code class=\"language-bash\">\npython matroschka.py -hide -m mac-password -k password secret image\n                </code></pre>\n\n                <h3>Reveal Secret</h3>\n                <pre><code class=\"language-bash\">\npython matroschka.py -open -m mac-password -k password image\n                </code></pre>\n\n                <h3>Example</h3>\n                <p>matroschka_medium.png gets hidden and encrypted in matroschka_big.png</p>\n                <pre><code class=\"language-bash\">\npython matroschka.py -hide -m foo -k bar resources/matroschka_medium.png resources/matroschka_big.png\n                </code></pre>\n                <p>Decrypting the image will save the extracted image in resources/secret-image.png</p>\n                <pre><code class=\"language-bash\">\npython matroschka.py -open -m foo -k bar resources/matroschka_big.png\n                </code></pre>\n\n                <h2>License</h2>\n                <p>GNU General Public License 3.0</p>"
		}
	}, {
		"type": "text",
		"data": {
			"text": "another text"
		}
	}]
}
